function googleSuccess(){app.model.requestTimer=setTimeout(function(){app.model.timedOut=!0,app.model.googleError()},1e4),app.model.init()}var app=app||{};app.ViewModel=function(){app.ViewModel.viewData=[],app.ViewModel.view=ko.observable("app-template"),app.ViewModel.yelpErrorMessage=ko.observableArray(),app.ViewModel.businesses=ko.observableArray(),app.ViewModel.currentPlaceName=ko.observableArray(),app.ViewModel.markers=ko.observableArray(),app.ViewModel.toggleBounce=function(){app.ViewModel.markers().forEach(function(e){e.setAnimation(null)}),app.model.currentMarker.setAnimation(google.maps.Animation.BOUNCE)},app.ViewModel.addMarker=function(e,o){app.ViewModel.markers()[e].setMap(o)},app.ViewModel.setMapOnAll=function(e){for(var o=0;o<app.ViewModel.markers().length;o++)app.ViewModel.markers()[o].setMap(e)},app.ViewModel.filterMarkers=function(e){app.ViewModel.setMapOnAll(null),app.ViewModel.markers().forEach(function(o,a){var n=o.title;e||app.ViewModel.setMapOnAll(app.model.map),-1!==n.toLowerCase().indexOf(e)&&app.ViewModel.addMarker(a,app.model.map)})},app.ViewModel.koFilter=ko.observable(""),app.ViewModel.filteredItems=ko.computed(function(){var e=app.ViewModel.koFilter().toLowerCase();return e?(app.ViewModel.filterMarkers(e),ko.utils.arrayFilter(app.ViewModel.markers(),function(o){return-1!==o.title.toLowerCase().indexOf(e)})):(app.ViewModel.filterMarkers(e),app.ViewModel.markers())}),app.ViewModel.viewData.push({filteredItems:app.ViewModel.filteredItems,koFilter:app.ViewModel.koFilter,showInfowindow:app.ViewModel.showInfowindow}),app.ViewModel.showInfowindow=function(e){app.ViewModel.koFilter(""),google.maps.event.trigger(e,"click")}};var app=app||{};app.model={locations:["320 Pioneer Way, Mountain View, CA 94041, United States","80 W El Camino Real, Mountain View, CA 94040, United States","Grant Park Plaza, 1040 Grant Road #350, Mountain View, CA 94040, United States","635 W Dana St, Mountain View, CA 94041, United States","53 W El Camino Real, Mountain View, CA 94040, United States","Grant Park Plaza, 1040 Grant Rd, Mountain View, CA 94040, United States","145 E Dana St, Mountain View, CA 94041, United States","701 E El Camino Real, Mountain View, CA 94040, United States","Grant Park Plaza, 1350 Grant Rd Suite 8, Mountain View, CA 94040, United States","750 Castro St, Mountain View, CA 94041, United States"],googleMap:'<div id="map"></div>',currentMarker:null,markers:[],mapOptions:{disableDefaultUI:!0},service:null,infoWindow:null,errorInfoWindow:null,loadingInfoWindow:null,timedOut:!1,map:null,requestTimer:null,stop:!1,isInfoWindowLoaded:!1,isYelpError:!1,isErrorInfoWindowLoaded:!1,getInfoWindow:function(){var e='<div id="info-window"><h4 data-bind="text: app.ViewModel.currentPlaceName"></h4><h6><strong>The 3 other nearby places via Yelp</strong></h6><table class="table table-striped table-condensed" id="marker-tbl"><thead><tr><th> Business </th><th> Rated </th><th class="hidden-xs"> Phone </th></tr> </thead><tbody data-bind="template: { name: \'business-template\', foreach: app.ViewModel.businesses, as: \'business\' }"></tbody></table></div>';return app.model.isInfoWindowLoaded=!1,new google.maps.InfoWindow({content:e})},getErrorInfoWindow:function(){var e='<div id="error-info-window" data-bind="template:{ name: \'yelp-error-template\', data: app.ViewModel.yelpErrorMessage }">';return app.model.isErrorInfoWindowLoaded=!1,new google.maps.InfoWindow({content:e})},getLoadingInfoWindow:function(){var e='<i class="fa fa-refresh fa-spin" style="font-size:20px"></i>';return new google.maps.InfoWindow({content:e})},bounds:null,centerMap:function(){app.model.map.setCenter(app.model.bounds.getCenter())},auth:{consumerKey:"CczkBNRj_eaoMgqd0o4n1A",consumerSecret:"jfMHfpHubGUZWRBXVAjTaTMRrbo",accessToken:"0IKGCVVzoRIpB2WKQtFPYa_stRAlzmYO",accessTokenSecret:"JEoYIbjq2NJkywPo7HBu_pG4GgE",serviceProvider:{signatureMethod:"HMAC-SHA1"}},getYelpData:function(e){var o="business",a=e.formatted_address,n=3,p={consumerSecret:app.model.auth.consumerSecret,tokenSecret:app.model.auth.accessTokenSecret},t=[];t.push(["term",o]),t.push(["limit",n]),t.push(["location",a]),t.push(["callback","cb"]),t.push(["oauth_consumer_key",app.model.auth.consumerKey]),t.push(["oauth_consumer_secret",app.model.auth.consumerSecret]),t.push(["oauth_token",app.model.auth.accessToken]),t.push(["oauth_signature_method","HMAC-SHA1"]);var r={action:"http://api.yelp.com/v2/search",method:"GET",parameters:t};OAuth.setTimestampAndNonce(r),OAuth.SignatureMethod.sign(r,p);var i=OAuth.getParameterMap(r.parameters);i.oauth_signature=OAuth.percentEncode(i.oauth_signature);var d=setTimeout(function(){app.model.handleError("Yelp data retrieval error!")},5e3);$.ajax({url:r.action,data:i,cache:!0,dataType:"jsonp",jsonpCallback:"cb"}).done(function(o){app.model.closeInfoWindow(),clearTimeout(d);var a=o.businesses;app.ViewModel.currentPlaceName([]),app.ViewModel.currentPlaceName.push(e.title);var n=app.model.map;app.model.infoWindow.open(n,e),app.ViewModel.businesses([]),a.forEach(function(e){app.ViewModel.businesses.push(e)})}).fail(function(e,o,a){app.model.handleError(o)})},handleError:function(e){var o=app.model.map,a=app.model.currentMarker;app.model.closeInfoWindow(),app.model.errorInfoWindow.open(o,a);var n="Error: "+e+" \n\nPlease Try again.";app.ViewModel.yelpErrorMessage([]),app.ViewModel.yelpErrorMessage.push(n)},googleError:function(){return app.ViewModel.view("error-template"),app.model.stop=!0,!0},init:function(){$(".mapDiv").append(app.model.googleMap),app.model.map=new google.maps.Map(document.getElementById("map"),app.model.mapOptions),app.model.service=new google.maps.places.PlacesService(app.model.map),app.model.infoWindow=app.model.getInfoWindow(),app.model.errorInfoWindow=app.model.getErrorInfoWindow(),app.model.loadingInfoWindow=app.model.getLoadingInfoWindow(),google.maps.event.addListener(app.model.infoWindow,"domready",function(){app.model.isInfoWindowLoaded||(ko.applyBindings(appViewModel,$("#info-window")[0]),app.model.isInfoWindowLoaded=!0)}),google.maps.event.addListener(app.model.errorInfoWindow,"domready",function(){app.model.isErrorInfoWindowLoaded||(ko.applyBindings(appViewModel,$("#error-info-window")[0]),app.model.isErrorInfoWindowLoaded=!0)}),window.mapBounds=new google.maps.LatLngBounds,app.model.locations.forEach(function(e){var o={query:e};app.model.service.textSearch(o,app.model.textSerachCallback)}),google.maps.event.addListener(app.model.map,"click",app.model.closeInfoWindow),window.addEventListener("resize",function(e){app.model.map.fitBounds(window.mapBounds)})},closeInfoWindow:function(){app.model.infoWindow.close(),app.model.errorInfoWindow.close(),app.model.loadingInfoWindow.close()},textSerachCallback:function(e,o){if(o!==google.maps.places.PlacesServiceStatus.OK)return app.model.googleError(),void window.alert("Error retrieving list of places, Try Again");console.log(e[0]),app.model.createMapMarker(e[0]);e[0]},createMapMarker:function(e){var o=e.geometry.location.lat(),a=e.geometry.location.lng(),n=e.name;app.model.bounds=window.mapBounds;var p=new google.maps.Marker({map:app.model.map,position:e.geometry.location,title:n,placeId:e.place_id,draggable:!0,animation:google.maps.Animation.DROP,formatted_address:e.formatted_address});app.model.markers.push(p),app.ViewModel.markers.push(p),app.model.locations.length===app.model.markers.length&&(app.model.timedOut=!1,clearTimeout(app.model.requestTimer)),google.maps.event.addListener(p,"click",function(){app.model.map.panTo(p.getPosition());setTimeout(function(){p.setAnimation(null)},5e3);app.model.currentMarker=null,app.model.currentMarker=p;var e=app.model.map;app.model.closeInfoWindow(),app.model.loadingInfoWindow.open(e,p),app.model.getYelpData(app.model.currentMarker)}),p.addListener("click",app.ViewModel.toggleBounce),app.model.bounds.extend(new google.maps.LatLng(o,a)),app.model.map.fitBounds(app.model.bounds),app.model.centerMap()}};var appViewModel=new app.ViewModel;ko.applyBindings(appViewModel);
//# sourceMappingURL=data:application/json;base64,
