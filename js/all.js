function googleSuccess(){ko.applyBindings(new app.ViewModel)}function googleError(){var e="There has been an error.";e+="\n\nRefresh page and this error should go away.";var a='<div id="carousel-example-generic" class="carousel slide"data-ride="carousel"><div class="carousel-inner" role="listbox"><div class="item active"><img  src="img/google-map-api.png" class="img-responsive " alt="Responsive image" /><div class="carousel-caption set-caption"><div class="full-width text-center"><h3 class="error">'+e.toUpperCase()+"</h3></div></div></div></div>";return $("#view").html(a),!0}var app=app||{};app.model={locations:["320 Pioneer Way, Mountain View, CA 94041, United States","80 W El Camino Real, Mountain View, CA 94040, United States","Grant Park Plaza, 1040 Grant Road #350, Mountain View, CA 94040, United States","635 W Dana St, Mountain View, CA 94041, United States","53 W El Camino Real, Mountain View, CA 94040, United States","Grant Park Plaza, 1040 Grant Rd, Mountain View, CA 94040, United States","145 E Dana St, Mountain View, CA 94041, United States","701 E El Camino Real, Mountain View, CA 94040, United States","Grant Park Plaza, 1350 Grant Rd Suite 8, Mountain View, CA 94040, United States","750 Castro St, Mountain View, CA 94041, United States"],googleMap:'<div id="map"></div>',currentMarker:null,mapOptions:{disableDefaultUI:!0},service:null,getInfoWindow:function(){return new google.maps.InfoWindow},auth:{consumerKey:"CczkBNRj_eaoMgqd0o4n1A",consumerSecret:"jfMHfpHubGUZWRBXVAjTaTMRrbo",accessToken:"0IKGCVVzoRIpB2WKQtFPYa_stRAlzmYO",accessTokenSecret:"JEoYIbjq2NJkywPo7HBu_pG4GgE",serviceProvider:{signatureMethod:"HMAC-SHA1"}},placeDetailsByPlaceId:function(e){var a=e.placeId,o={placeId:a};app.ViewModel.service.getDetails(o,app.model.placeCallBack)},placeCallBack:function(e,a){a===google.maps.places.PlacesServiceStatus.OK&&(console.log("place: "),console.log(e),app.model.getYelpData(e))},getYelpData:function(e){console.log("about to request yelp data");var a="business",o=e.formatted_address,r=3,t={consumerSecret:app.model.auth.consumerSecret,tokenSecret:app.model.auth.accessTokenSecret},n=[];n.push(["term",a]),n.push(["limit",r]),n.push(["location",o]),n.push(["callback","cb"]),n.push(["oauth_consumer_key",app.model.auth.consumerKey]),n.push(["oauth_consumer_secret",app.model.auth.consumerSecret]),n.push(["oauth_token",app.model.auth.accessToken]),n.push(["oauth_signature_method","HMAC-SHA1"]);var l={action:"http://api.yelp.com/v2/search",method:"GET",parameters:n};OAuth.setTimestampAndNonce(l),OAuth.SignatureMethod.sign(l,t);var i=OAuth.getParameterMap(l.parameters);i.oauth_signature=OAuth.percentEncode(i.oauth_signature);var p=setTimeout(function(){app.model.handleError("Yelp data retrieval error!")},5e3);$.ajax({url:l.action,data:i,cache:!0,dataType:"jsonp",jsonpCallback:"cb"}).done(function(a){console.log(a),clearTimeout(p);var o=$("#marker-tbl-row").html(),r=Handlebars.compile(o),t=a.businesses;t.name=e.name,t.icon=e.icon;var n=r(t),l=app.ViewModel.map,i=app.model.currentMarker;app.model.currentMarker.infoWindow.setContent(n),console.log(app.model.currentMarker.infoWindow),app.model.currentMarker.infoWindow.open(l,i)}).fail(function(e,a){app.model.handleError(a)})},handleError:function(e){var a=$("#yelpErrorScript").html(),o=Handlebars.compile(a),r={imgUrl:"img/warning.png",error:"Error: "+e+" Please Try again."},t=o(r);app.model.currentMarker.infoWindow.setContent(t),app.model.currentMarker.infoWindow.open(app.ViewModel.map,app.model.currentMarker)}},app.ViewModel=function(){var e=this;e.timedOut=!1,e.markers=ko.observableArray([]),$("#mapDiv").append(app.model.googleMap);try{app.ViewModel.map=new google.maps.Map(document.getElementById("map"),app.model.mapOptions)}catch(a){console.log("error: "+a.message),e.stop=googleError()}finally{}app.ViewModel.service=new google.maps.places.PlacesService(app.ViewModel.map),app.ViewModel.createMapMarker=function(a){var o=a.geometry.location.lat(),r=a.geometry.location.lng(),t=a.name,n=window.mapBounds,l=new google.maps.Marker({map:app.ViewModel.map,position:a.geometry.location,title:t,placeId:a.place_id,draggable:!0,animation:google.maps.Animation.DROP});l.infoWindow=app.model.getInfoWindow(),e.markers.push(l),app.model.locations.length===e.markers().length&&(e.timedOut=!1,clearTimeout(e.requestTimer),console.log("timer reset")),google.maps.event.addListener(l,"click",function(){null!==app.model.currentMarker&&null!==app.model.currentMarker.infoWindow&&app.model.currentMarker.infoWindow.close(),app.model.currentMarker=null,app.model.currentMarker=l,app.model.placeDetailsByPlaceId(app.model.currentMarker)}),l.addListener("click",app.ViewModel.toggleBounce),n.extend(new google.maps.LatLng(o,r)),app.ViewModel.map.fitBounds(n),app.ViewModel.map.setCenter(n.getCenter())},app.ViewModel.toggleBounce=function(){e.markers().forEach(function(e){e.setAnimation(null)}),app.model.currentMarker.setAnimation(google.maps.Animation.BOUNCE)},e.callback=function(e,a){if(console.log("in callback"),a===google.maps.places.PlacesServiceStatus.OK){app.ViewModel.createMapMarker(e[0]);var o=e[0];console.log(o)}},this.pinPoster=function(){app.model.locations.forEach(function(a){var o={query:a};app.ViewModel.service.textSearch(o,e.callback)})},window.mapBounds=new google.maps.LatLngBounds,e.requestTimer=setTimeout(function(){e.timedOut=!0,console.log("Request timed out."),googleError()},1e4),e.pinPoster(),e.addMarker=function(a,o){e.markers()[a].setMap(o)},e.setMapOnAll=function(a){for(var o=0;o<e.markers().length;o++)e.markers()[o].setMap(a)},e.filterMarkers=function(a){e.setMapOnAll(null),e.markers().forEach(function(o,r){var t=o.title;a||e.setMapOnAll(app.ViewModel.map),-1!==t.toLowerCase().indexOf(a)&&e.addMarker(r,app.ViewModel.map)})},e.filter=ko.observable(""),e.initialize=!0,e.filteredItems=ko.computed(function(){var a=e.filter().toLowerCase();return a?(e.filterMarkers(a),ko.utils.arrayFilter(e.markers(),function(e){return-1!==e.title.toLowerCase().indexOf(a)})):(e.filterMarkers(a),e.markers())}),this.showInfowindow=function(a){null!==app.model.currentMarker&&null!==app.model.currentMarker.infoWindow&&app.model.currentMarker.infoWindow.close(),e.filter(""),app.model.currentMarker=null,app.model.currentMarker=a,app.ViewModel.toggleBounce(),app.model.placeDetailsByPlaceId(app.model.currentMarker)},window.addEventListener("resize",function(e){app.ViewModel.map.fitBounds(window.mapBounds),app.ViewModel.map.setCenter(bounds.getCenter()),console.log("resized"+e.message)})};
//# sourceMappingURL=data:application/json;base64,
